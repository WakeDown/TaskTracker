
@using TaskTracker.Models
@using TaskTracker.Objects
@model IEnumerable<TaskTracker.Models.TaskClaim>

@{
    ViewBag.Title = "Список задач";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string[] selStatesStr = String.IsNullOrEmpty(Request.QueryString["tsts"]) ? new string[0] : Request.QueryString["tsts"].Split(',');
    var sts = TaskState.GetList();
    int[] selStates = !selStatesStr.Any() ? TaskState.GetManagerDefaultList().Select(x => x.TaskStateId).ToArray() : Array.ConvertAll<string, int>(selStatesStr, int.Parse);

    string[] selProjectsStr = String.IsNullOrEmpty(Request.QueryString["prjs"]) ? new string[0] : Request.QueryString["prjs"].Split(',');
    var prjs = Project.GetList();
    int[] selProjects = !selProjectsStr.Any() ? prjs.Select(x => x.ProjectId).ToArray() : Array.ConvertAll<string, int>(selProjectsStr, int.Parse);

    ViewBag.TaskCategoryList = TaskCategory.GetList();
    ViewBag.TaskImportantList = TaskImportant.GetList();
    ViewBag.TaskQuicklyList = TaskQuickly.GetList();
    ViewBag.SpecialistList = Specialist.GetProgrammers();

    var selSpec = AdHelper.GetUserBySid(Request.QueryString["spec"]);
    var selAuthor = AdHelper.GetUserBySid(Request.QueryString["author"]);
}

<div class="row no-pad-bot no-marg-bot">
    <div class="col-lg-11">
        <div id="stateFilterContainer">
            <div class="pull-left marg-r-md">
                <input type="checkbox" value="" id="chk-ts-all" @(sts.Count() == selStates.Count() ? "checked='checked'" : "") /><label for="chk-ts-all">все</label>
            </div>

            @foreach (var ts in sts)
            {
                <div class="pull-left marg-r-md">
                    <input type="checkbox" value="@ts.TaskStateId" name="chk-ts" id="chk-ts-@ts.TaskStateId" @(selStates.Contains(ts.TaskStateId) ? "checked='checked'" : "") /><label for="chk-ts-@ts.TaskStateId">@ts.Name</label>
                </div>
            }
        </div>
        <div class="clearfix"></div>
        <div id="projectFilterContainer">
            <div class="pull-left marg-r-md">
                <input type="checkbox" value="" id="chk-prj-all" @(prjs.Count() == selProjects.Count() ? "checked='checked'" : "") /><label for="chk-prj-all">все</label>
            </div>
            @foreach (var prj in Project.GetList())
            {
                <div class="pull-left marg-r-md">
                    <input type="checkbox" value="@prj.ProjectId" name="chk-prj" id="chk-prj-@prj.ProjectId" @(selProjects.Contains(prj.ProjectId) ? "checked='checked'" : "") /><label for="chk-prj-@prj.ProjectId">@prj.Name</label>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-1">
        <a class="btn btn-primary btn-lg" id="search"><i class="fa fa-search"></i></a>
    </div>
</div>



<table class="table table-bordered table-hover">
    <thead>
        @*@if (ViewBag.AdGroup == AdGroup.TaskTrackerManager)
            {
                @Html.Partial("TaskListManagerHeader", Model)
            }
            else if (ViewBag.AdGroup == AdGroup.TaskTrackerProg)
            {
                @Html.Partial("TaskListProgHeader", Model)
            }
            else
            {
                @Html.Partial("TaskListUserHeader", Model)
            }*@
        <tr class="bg-primary white-text">
            <th></th>
            <th class="min-width center">ID</th>
            <th>Задача</th>
            <th style="width: 100px">Приоритет</th>
            <th>
                <select id='specFilter' class='form-control input-xs'>
                    <option name="spec" sid="" fio="Специалист">Специалист</option>
                    @foreach (var spec in Specialist.GetProgrammers())
            {
                        <option sid="@spec.Key" fio="@spec.Value" name="spec" @(selSpec.SpecialistSid == spec.Key ? "selected" : String.Empty)>@spec.Value</option>
                    }
                </select>
            </th>
            <th style="min-width: 200px">
                <select id='authorFilter' class='form-control input-xs'>
                    <option name="author" sid="" fio="Автор">Автор</option>
                    @*href="@Url.Action("List", new { auth = "", spec = Request.QueryString["spec"] })"*@
                    @foreach (var auth in Model.GroupBy(x => x.CreatorSid).Select(x => new { Sid = x.Key, Name = AdHelper.GetUserBySid(x.Key).DisplayName }).OrderBy(x => x.Name))
                    {
                        <option sid="@auth.Sid" fio="@auth.Name" name="author" @(selAuthor.SpecialistSid == auth.Sid ? "selected" : String.Empty)>@auth.Name</option>
                    }
                </select>

            </th>
            @*<th style="width: 20%"></th>*@
        </tr>
    </thead>
    @if (Model.Any())
    {
        <tbody>
            @foreach (TaskClaim task in Model)
            {
                @*if (ViewBag.AdGroup == AdGroup.TaskTrackerManager)
                    {
                       @Html.Partial("TaskListManagerItem", task)
                    }
                    else if (ViewBag.AdGroup == AdGroup.TaskTrackerProg)
                    {
                        @Html.Partial("TaskListProgItem", task)
                    }
                    else
                    {
                        @Html.Partial("TaskListUserItem", task)
                    }*@
                @Html.Partial("TaskListManagerItem", task)
            }
        </tbody>
    }
    else
    {
        <tbody>
            <tr>
                <td colspan="7">пусто</td>
            </tr>
        </tbody>
    }
</table>

<div id="modalPause" class="modal">
    <div class="modal-content">
        <h4>Укажите причину приостановки</h4>
        <div class="input-field col s12">
            <input type="text" id="pauseDescr" class="validate" required="required" />
            <label for="pauseDescr">Причина</label>
        </div>
    </div>
    <div class="modal-footer">
        <a id="pause" href="#!" class="modal-action modal-close waves-effect waves-green btn green"><i class="material-icons">done</i></a>
        <a href="#!" class="modal-action modal-close waves-effect waves-red btn red "><i class="material-icons">close</i></a>
    </div>
</div>
<div id="modalRework" class="modal">
    <div class="modal-content">
        <h4>Укажите причину возврата в работу</h4>
        <div class="input-field col s12">
            <input type="text" id="reworkDescr" class="validate" required="required" />
            <label for="reworkDescr">Причина</label>
        </div>
    </div>
    <div class="modal-footer">
        <a id="rework" href="#!" class="modal-action modal-close waves-effect waves-green btn green"><i class="material-icons">done</i></a>
        <a href="#!" class="modal-action modal-close waves-effect waves-red btn red "><i class="material-icons">close</i></a>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">

        $(function() {

            loadCheckpointCounts();
            $('#modalPauseModal.modal-trigger').click(function() {
                $('#pause').attr('tid', $(this).attr('tid'));
                $('#modalPause').openModal();
            });
            $('#modalReworkModal.modal-trigger').click(function() {
                $('#rework').attr('tid', $(this).attr('tid'));
                $('#modalRework').openModal();
            });
            $('#chk-prj-all').click(function() {
                $('#projectFilterContainer [name="chk-prj"]').prop('checked', $(this).is(':checked'));
            });
            $('#projectFilterContainer [name="chk-prj"]').click(function() {
                $('#chk-prj-all').prop('checked', ($('#projectFilterContainer [name="chk-prj"]').length === $('#projectFilterContainer [name="chk-prj"]:checked').length));
            });
            $('#chk-ts-all').click(function() {
                $('#stateFilterContainer [name="chk-ts"]').prop('checked', $(this).is(':checked'));
            });
            $('#stateFilterContainer [name="chk-ts"]').click(function() {
                $('#chk-ts-all').prop('checked', ($('#stateFilterContainer [name="chk-ts"]').length === $('#stateFilterContainer [name="chk-ts"]:checked').length));
            });
            $('#search').click(function() {
                var selStates = $('#stateFilterContainer [name="chk-ts"]:checked');
                var stArr = [];
                for (var i = 0; i < selStates.length; i++) {
                    var val = $(selStates[i]).attr('value');
                    if (val !== '') stArr.push(val);
                }
                var tsts = stArr.join(',');
                var selProjects = $('#projectFilterContainer [name="chk-prj"]:checked');
                var prjArr = [];
                for (var i = 0; i < selProjects.length; i++) {
                    var val = $(selProjects[i]).attr('value');
                    if (val !== '') prjArr.push(val);
                }
                var prjs = prjArr.join(',');
                var author = $('#selectedAuthor').attr('sid') !== undefined ? $('#selectedAuthor').attr('sid') : '';
                var spec = $('#selectedSpec').attr('sid') !== undefined ? $('#selectedSpec').attr('sid') : '';
                var url = '@Url.Action("List")?tsts=' + tsts + '&author=' + author + '&spec=' + spec + '&prjs=' + prjs;
                window.location = url;
            });
            $('#specFilter [name="spec"]').click(function() {
                var el = $(this);
                var $sel = $('#selectedSpec');
                $sel.attr('sid', el.attr('sid'));
                $sel.text(el.attr('fio'));
            });
            $('#authorFilter [name="author"]').click(function() {
                var el = $(this);
                var $sel = $('#selectedAuthor');
                $sel.attr('sid', el.attr('sid'));
                $sel.text(el.attr('fio'));
            });
            initTaskList();
        });

        function loadCheckpointCounts() {
            var $list = $('[name="taskClaimItem"]');
            for (var i = 0; i < $list.length; i++) {
                //var $item = $('[name="chkpCount"]', $list[i]);
                var tid = $($list[i]).attr('tid');
                var listItemId = $($list[i]).attr('id');
                setCheckpointCounts(tid, listItemId);
                @*$.ajax({
                    url: '@Url.Action("GetTaskCheckpointCount")',
                    method: 'POST',
                    data: { taskId: tid },
                    success: function(data) {
                        $('#' + itemId).append('test');
                    }
            });*@

            }

        }

        function setCheckpointCounts(tid, listItemId) {
            $.ajax({
                url: '@Url.Action("GetTaskCheckpointCount")',
                method: 'POST',
                data: { taskId: tid },
                success: function(data) {
                    var $item = $('#' + listItemId + ' [name="chkpCount"]');

                    $item.append('<div><span class="bold" title="контрольные точки">КТ:</span> <span class="grey-text" title="всего">' + data.all + '</span>-<span class="green-text" title="выполнено">' + data.done + '</span>-<span class="red-text" title="невыполнено">' + data.undone + '</span></div>');
                }
            });
        }

        function initTaskList($container) {
            if ($container == null) $container = $('body');

            @*$('[type="test"]', $container).click(function () {
                var tid = $(this).attr('tid');
                $.ajax(
                {
                    url: '@Url.Action("SetTestState")',
                    method: 'POST',
                    data: { id: tid },
                    success: function () {
                        updateTaskItem(tid);
                    },
                    error: function (data) {
                        alert(data.error);
                    }
                });
            });*@
            $('[name="claim-rank"]', $container).keypress(
                function (e) {
                    if (e.keyCode === 13) {
                        var $this = $(this);
                        var rank = $this.val();

                        if (isNaN(rank)) {
                            alert('Укажите число');
                            $this.focus();
                            $this.select();
                            return;
                        }

                        var taskId = $this.attr('tid');
                        $this.prop('disabled', true);
                        $.ajax({
                            url: '@Url.Action("SaveTaskRank")',
                            method: 'POST',
                            data: { taskId: taskId, rank: rank },
                            success: function (data) {
                                $this.prop('disabled', false);
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert(xhr.responseText);
                                $this.prop('disabled', false);
                            }
                        });
                        return;
                    }
                });
            $('[type="done"]', $container).click(function() {
                var tid = $(this).attr('tid');
                $.ajax(
                {
                    url: '@Url.Action("SetDoneState")',
                    method: 'POST',
                    data: { id: tid },
                    success: function() {
                        updateTaskItem(tid);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(xhr.responseText);
                    }
                });
            });
            $('[type="work"]', $container).click(function() {
                var tid = $(this).attr('tid');
                $.ajax(
                {
                    url: '@Url.Action("SetWorkState")',
                    method: 'POST',
                    data: { id: tid },
                    success: function() {
                        updateTaskItem(tid);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(xhr.responseText);
                    }
                });
            });
            $('#pause', $container).click(function() {
                var tid = $(this).attr('tid');
                var descr = $('#pauseDescr').val();
                $(this).attr('tid', '');
                $.ajax(
                {
                    url: '@Url.Action("SetPauseState")',
                    method: 'POST',
                    data: { id: tid, descr: descr },
                    success: function() {
                        updateTaskItem(tid);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(xhr.responseText);
                    }
                });
            });
            $('#rework', $container).click(function() {
                var tid = $(this).attr('tid');
                var descr = $('#reworkDescr').val();
                $(this).attr('tid', '');
                $.ajax(
                {
                    url: '@Url.Action("SetReworkState")',
                    method: 'POST',
                    data: { id: tid, descr: descr },
                    success: function() {
                        updateTaskItem(tid);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(xhr.responseText);
                    }
                });
            });
            $('[name="set-category"]', $container).change(function(e) {
                var tid = $(this).find('option:checked').attr('tid');
                var cid = $(this).find('option:checked').attr('cid');

                if (tid > 0 && cid > 0) {
                    $.ajax(
                    {
                        url: '@Url.Action("SetTaskCategory")',
                        method: 'POST',
                        data: { id: tid, cid: cid },
                        success: function(e) {
                            updateTaskItem(tid);
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.responseText);
                        }
                    });
                }
            });
            $('[name="set-specialist"]', $container).change(function() {
                var tid = $(this).find('option:checked').attr('tid');
                var sid = $(this).find('option:checked').attr('sid');
                if (tid > 0) {
                    $.ajax(
                    {
                        url: '@Url.Action("SetTaskSpecialist")',
                        method: 'POST',
                        data: { id: tid, sid: sid },
                        success: function(data) {
                            if (data.error == null) {
                                updateTaskItem(tid);
                            } else {
                                alert(data.error);
                            }
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.responseText);
                        }
                    });
                }
            });
            $('[name="set-important"]', $container).change(function() {
                var tid = $(this).find('option:checked').attr('tid');
                var iid = $(this).find('option:checked').attr('iid');
                if (tid > 0 && iid > 0) {
                    $.ajax(
                    {
                        url: '@Url.Action("SetTaskImportant")',
                        method: 'POST',
                        data: { id: tid, iid: iid },
                        success: function() {
                            updateTaskItem(tid);
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.responseText);
                        }
                    });
                }
            });
            $('[name="set-quickly"]', $container).change(function() {
                var tid = $(this).find('option:checked').attr('tid');
                var qid = $(this).find('option:checked').attr('qid');
                if (tid > 0 && qid > 0) {
                    $.ajax(
                    {
                        url: '@Url.Action("SetTaskQuickly")',
                        method: 'POST',
                        data: { id: tid, qid: qid },
                        success: function() {
                            updateTaskItem(tid);
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.responseText);
                        }
                    });
                }
            });

            $('.dropdown-button', $container).dropdown({
                inDuration: 300,
                outDuration: 225,
                constrain_width: false, // Does not change width of dropdown to that of the activator
                gutter: 0, // Spacing from edge
                belowOrigin: false // Displays dropdown below the button
            });
        }

        function updateTaskItem(id) {
            $.ajax({
                url: '@Url.Action("GetTaskListManagerItem", "Task")?id=' + id,
                method: 'GET',
                success: function(html) {
                    $("tr#taskClaim-" + id).replaceWith(html);
                    var $tr = $("tr#taskClaim-" + id);
                    $tr.addClass('updated-task-claim');
                    initTaskList($tr);
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert(xhr.responseText);
                }
            });
        }
    </script>
}